data()
summary(state)
summary(state.name)
state.name
cls
clear
cls
# Sample Session
library(R2HTML)
HTMLStart(outdir="c:/mydir", file="myreport",
extension="html", echo=FALSE, HTMLframe=TRUE)
HTML.title("My Report", HR=1)
HTML.title("Description of my data", HR=3)
summary(mydata)
HTMLhr()
HTML.title("X Y Scatter Plot", HR=2)
plot(mydata$y~mydata$x)
HTMLplot()
HTMLStop()
install.packages("R2HTML")
# Sample Session
library(R2HTML)
HTMLStart(outdir="c:/mydir", file="myreport",
extension="html", echo=FALSE, HTMLframe=TRUE)
HTML.title("My Report", HR=1)
HTML.title("Description of my data", HR=3)
summary(mydata)
HTMLhr()
HTML.title("X Y Scatter Plot", HR=2)
plot(mydata$y~mydata$x)
HTMLplot()
HTMLStop()
# Sample Session
library(R2HTML)
HTMLStart(outdir="c:/temp", file="myreport",
extension="html", echo=FALSE, HTMLframe=TRUE)
HTML.title("My Report", HR=1)
HTML.title("Description of my data", HR=3)
summary(mydata)
HTMLhr()
HTML.title("X Y Scatter Plot", HR=2)
plot(mydata$y~mydata$x)
HTMLplot()
HTMLStop()
cells <- c(1,26,24,68)
rnames <- c("R1", "R2")
cnames <- c("C1", "C2")
mymatrix <- matrix(cells, nrow=2, ncol=2, byrow=TRUE,
dimnames=list(rnames, cnames))
mymatrix
View(mymatrix)
recs <- sqlFetch(ch, "tbl_Users")
myData
myData
library(RODBC)
Connection <- odbcDriverConnect(connection='driver={SQL Server};server=localhost;database=Company_Censeo;UID=CenseoAdmin;Pwd=$Censeo@nl1n3;')
#Query <- "SELECT db_users_row_id, db_ssn FROM tbl_Users"
Query <- "exec sp_tbl_users_list @cols='*', @whereclause='1=1'"
myData <- sqlQuery(Connection, Query, errors=TRUE)
odbcCloseAll()
myData
install.packages("RODBC")
myData
myData
Query <- "SELECT *  FROM tbl_Prices where db_ticker_id = 827"
library(RODBC)
Connection <- odbcDriverConnect(connection='driver={SQL Server};server=localhost;database=IDToDSN_DKC;UID=CenseoAdmin;Pwd=$Censeo@nl1n3;')
Query <- "SELECT *  FROM tbl_Prices where db_ticker_id = 827"
#Query <- "exec sp_tbl_users_list @cols='*', @whereclause='1=1'"
myData <- sqlQuery(Connection, Query, errors=TRUE)
odbcCloseAll()
myData
library(RODBC)
Connection <- odbcDriverConnect(connection='driver={SQL Server};server=localhost;database=IDToDSN_DKC;UID=CenseoAdmin;Pwd=$Censeo@nl1n3;')
Query <- "SELECT *  FROM tbl_Prices where db_ticker_id = 827"
#Query <- "exec sp_tbl_users_list @cols='*', @whereclause='1=1'"
myData <- sqlQuery(Connection, Query, errors=TRUE)
odbcCloseAll()
myData
myData
myData
myData
library(RODBC)
Connection <- odbcDriverConnect(connection='driver={SQL Server};server=PANGIN-AVNI\SQLEXPRESS;database=IDToDSN_DKC;UID=CenseoAdmin;Pwd=$Censeo@nl1n3;')
library(RODBC)
Connection <- odbcDriverConnect(connection='driver={SQL Server};server=PANGIN-AVNI\\SQLEXPRESS;database=IDToDSN_DKC;UID=CenseoAdmin;Pwd=$Censeo@nl1n3;')
library(RODBC)
#Connection <- odbcDriverConnect(connection='driver={SQL Server};server=PANGIN-AVNI\\SQLEXPRESS;database=IDToDSN_DKC;UID=CenseoAdmin;Pwd=$Censeo@nl1n3;')
Connection <- odbcDriverConnect(connection='driver={SQL Server};server=PANGIN-AVNI\\SQLEXPRESS;database=IDToDSN_DKC;Trusted Connection=yes')
Query <- "SELECT *  FROM tbl_Prices where db_ticker_id = 827"
#Query <- "exec sp_tbl_users_list @cols='*', @whereclause='1=1'"
myData <- sqlQuery(Connection, Query, errors=TRUE)
odbcCloseAll()
myData
summary(myData)
library(RODBC)
#Connection <- odbcDriverConnect(connection='driver={SQL Server};server=PANGIN-AVNI\\SQLEXPRESS;database=IDToDSN_DKC;UID=CenseoAdmin;Pwd=$Censeo@nl1n3;')
Connection <- odbcDriverConnect(connection='driver={SQL Server};server=PANGIN-AVNI\\SQLEXPRESS;database=IDToDSN_DKC;Trusted Connection=yes')
Query <- "SELECT db_close FROM tbl_Prices where db_ticker_id = 827"
#Query <- "exec sp_tbl_users_list @cols='*', @whereclause='1=1'"
myData <- sqlQuery(Connection, Query, errors=TRUE)
odbcCloseAll()
myData
summary(myData)
summary(myData)
library(RODBC)
#Connection <- odbcDriverConnect(connection='driver={SQL Server};server=PANGIN-AVNI\\SQLEXPRESS;database=IDToDSN_DKC;UID=CenseoAdmin;Pwd=$Censeo@nl1n3;')
Connection <- odbcDriverConnect(connection='driver={SQL Server};server=PANGIN-AVNI\\SQLEXPRESS;database=IDToDSN_DKC;Trusted Connection=yes')
Query <- "SELECT db_close FROM tbl_Prices where db_ticker_id = 827"
#Query <- "exec sp_tbl_users_list @cols='*', @whereclause='1=1'"
myData <- sqlQuery(Connection, Query, errors=TRUE)
odbcCloseAll()
myData
summary(myData)
summary(myData)
install.packages("KernSmooth")
packages("KernSmooth")
packages("KernSmoothR")
KernSmooth
display KernSmooth
display "KernSmooth"
packages("KernSmooth")
find.packages("KernSmooth")
packages
info
help
all.packages
help()
help(package=KernSmooth)
clear
cls
install.packages("knitr")
install.packages("TTR")
install.packages("tseries")
install.packages("quadprog")
######################################## load data ########################################
get.data <- function(sec, start = Sys.Date() - 2520, end = Sys.Date()) {
close <- get.hist.quote(sec[1], start = start, quote = 'AdjClose')
for (i in 2:length(sec)) {
close <- cbind(close, get.hist.quote(sec[i],
start = start, quote = 'AdjClose'))
}
names(close) <- sec
close
}
######################################## load data ########################################
####################################### formatting #######################################
prep.data <- function(raw, period = 'weeks') {
prep_rets <- raw[endpoints(raw, period), ]
prep_rets <- ROC(prep_rets)
prep_rets <- prep_rets[complete.cases(prep_rets), ]
mean_rets <- colMeans(prep_rets)
stdev <- apply(prep_rets, 2, sd)
covar <- cov(prep_rets)
list(rets = prep_rets, mean = mean_rets, stdev = stdev, covar = covar)
}
####################################### formatting #######################################
################################# find efficient frontier #################################
efront <- function(prep_data, nport = 50, shorts = FALSE) {
ef <- matrix(0, nport, 2 + ncol(prep_data$rets))
pm <- seq((min(prep_data$mean) + .1^10), (max(prep_data$mean) - .1^10),
length.out = nport)
for (i in 1:nport) {
port <- NULL
try (port <- portfolio.optim(prep_data$rets, pm = pm[i], shorts = shorts))
if (!is.null(port)) {
ef[i, 1] <- port$ps
ef[i, 2] <- port$pm
ef[i, 3:ncol(ef)] <- port$pw
}
}
list(ef = ef[, 1:2], wts = ef[, -1:-2])
}
################################# find efficient frontier #################################
################################# portfolio optimization #################################
############## only minimize variance or maximize sharpe ratio for now  #################
opt.port <- function(prep_data, req = -10, reshigh = 1, reslow = .1^10,
meq = 1, obj = 'minvar') {
Dmat <- 2 * prep_data$covar
if (obj == 'minvar') {
dvec <- rep(0, length(prep_data$mean))
} else if (obj == 'sharpe') {
dvec <- prep_data$mean
}
Amat_eq1 <- rep(1, length(prep_data$mean))
Amat_eq2 <- prep_data$mean
Amat_ineq1 <- -diag(length(prep_data$mean))
Amat_ineq2 <- diag(length(prep_data$mean))
bvec_eq1 <- 1
bvec_eq2 <- req
bvec_ineq1 <- rep(-reshigh, length(prep_data$mean))
bvec_ineq2 <- rep(reslow, length(prep_data$mean))
Amat <- cbind(Amat_eq1, Amat_eq2, Amat_ineq1, Amat_ineq2)
bvec <- c(bvec_eq1, bvec_eq2, bvec_ineq1, bvec_ineq2)
port_solu <- NULL
try(port_solu <- solve.QP(Dmat = Dmat, dvec = dvec, Amat = Amat,
bvec = bvec, meq = meq))
if (!is.null(port_solu)) {
pm = port_solu$solution %*% prep_data$mean
if (obj == 'minvar') {
ps = sqrt(port_solu$value)
} else if (obj == 'sharpe') {
ps = sqrt((port_solu$value) + pm)
}
list(pw = port_solu$solution, pm = pm, ps = ps)
}
}
################################# portfolio optimization ##############################
require(TTR)
require(tseries)
require(quadprog)
sec <- c('GS','C','MS','GE','F','LMT','ROC','GOOG','ORCL','XOM','MON','COKE',
'WMT','RS','RTN','DB','DIS','TWX','COST','BA')
raw <- get.data(sec)
prep_data <- prep.data(raw)
ef1 <- efront(prep_data) ## long only
ef2 <- efront(prep_data, short = TRUE) ## long/short
plot(ef1$ef, xlim = c(0, .15), ylim = c(-.008, .005), type = 'l', lty = 6, xlab = 'risk(sd)',
ylab = 'return', main = 'Efficient Frontier', col = 'navyblue')
lines(ef2$ef, lty = 3, col = 'navyblue')
cols <- ifelse(prep_data$mean > 0, 'green','red')
points(prep_data$stdev, prep_data$mean, pch = 4, cex = .7, col = cols)
text(prep_data$stdev, prep_data$mean, sec, col = cols, cex = .5, adj = -.4)
text(.02, .0035, 'LONG/SHORT', col = 'navyblue', cex = .6)
text(.06, .0035, 'LONG ONLY', col = 'navyblue', cex = .6)
grid()
minvar <- opt.port(prep_data, obj = 'minvar')
sharpe <- opt.port(prep_data, obj = 'sharpe')
points(minvar$ps, minvar$pm, pch = 17, col = 'red')
points(sharpe$ps, sharpe$pm, pch = 17, col = 'blue')
legend('topright', c('min.var','max.sharpe'), pch = 17,
col = c('red','blue'), text.col = c('red','blue'), cex = .8)
raw <- get.data(sec)
source('D:/Data/FTP Download/RnD/R/Sample_Scripts/eff_frontier.R')
prep_data <- prep.data(raw)
ef1 <- efront(prep_data) ## long only
ef2 <- efront(prep_data, short = TRUE) ## long/short
plot(ef1$ef, xlim = c(0, .15), ylim = c(-.008, .005), type = 'l', lty = 6, xlab = 'risk(sd)',
ylab = 'return', main = 'Efficient Frontier', col = 'navyblue')
lines(ef2$ef, lty = 3, col = 'navyblue')
cols <- ifelse(prep_data$mean > 0, 'green','red')
points(prep_data$stdev, prep_data$mean, pch = 4, cex = .7, col = cols)
text(prep_data$stdev, prep_data$mean, sec, col = cols, cex = .5, adj = -.4)
text(.02, .0035, 'LONG/SHORT', col = 'navyblue', cex = .6)
text(.06, .0035, 'LONG ONLY', col = 'navyblue', cex = .6)
grid()
minvar <- opt.port(prep_data, obj = 'minvar')
sharpe <- opt.port(prep_data, obj = 'sharpe')
points(minvar$ps, minvar$pm, pch = 17, col = 'red')
points(sharpe$ps, sharpe$pm, pch = 17, col = 'blue')
legend('topright', c('min.var','max.sharpe'), pch = 17,
col = c('red','blue'), text.col = c('red','blue'), cex = .8)
require(TTR)
require(tseries)
require(quadprog)
sec <- c('GS','C','MS','GE','F','LMT','ROC','GOOG','ORCL','XOM','MON','COKE',
'WMT','RS','RTN','DB','DIS','TWX','COST','BA')
raw <- get.data(sec)
warnings()
prep_data <- prep.data(raw)
ef1 <- efront(prep_data) ## long only
source('D:/Data/FTP Download/RnD/R/Sample_Scripts/eff_frontier.R')
plot(ef1$ef, xlim = c(0, .15), ylim = c(-.008, .005), type = 'l', lty = 6, xlab = 'risk(sd)',
ylab = 'return', main = 'Efficient Frontier', col = 'navyblue')
lines(ef2$ef, lty = 3, col = 'navyblue')
cols <- ifelse(prep_data$mean > 0, 'green','red')
points(prep_data$stdev, prep_data$mean, pch = 4, cex = .7, col = cols)
text(prep_data$stdev, prep_data$mean, sec, col = cols, cex = .5, adj = -.4)
text(.02, .0035, 'LONG/SHORT', col = 'navyblue', cex = .6)
text(.06, .0035, 'LONG ONLY', col = 'navyblue', cex = .6)
grid()
minvar <- opt.port(prep_data, obj = 'minvar')
sharpe <- opt.port(prep_data, obj = 'sharpe')
source('D:/Data/FTP Download/RnD/R/Sample_Scripts/eff_frontier.R', echo=TRUE)
source('D:/Data/FTP Download/RnD/R/Sample_Scripts/eff_frontier.R', echo=TRUE)
install.packages(quantmode)
install.packages(quantmod)
install.packages("quantmod"")
library(quantmod)
install.packages(quantmod")
install.packages("quantmod")
install.packages("PerformanceAnalytics")
source('D:/Data/FTP Download/RnD/R/Sample_Scripts/eff_frontier.R', echo=TRUE)
summary(myData)
source('~/.active-rstudio-document', echo=TRUE)
source('D:/Data/FTP Download/RnD/R/Sample_Scripts/ODBC_SQLServer.R')
setwd("D:/Data/FTP Download/Coursera/Data_Scientist_Path/R/Getting_N_Cleaning_Data")
source("quiz1.r")
source("quiz1.r")
source("quiz1.r")
q1()
source("quiz1.r")
install.packages('rJava')
install.packages("rJava")
source("quiz1.r")
install.packages("xlsxjars")
source("quiz1.r")
source("quiz1.r")
q5()
install.packages("~/Downloads/RMySQL_0.9-3.tar.gz", repos = NULL, type = "source")
install.pacakages("DBI")
install.packages("DBI")
install.packages("~/Downloads/RMySQL_0.9-3.tar.gz", repos = NULL, type = "source")
packages()
library(rMYSQL)
library(RMySQL)
con <- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="user",
password = "password", dbname="db")
install.packages("~/Downloads/RMySQL_0.9-3.tar.gz", repos = NULL, type = "source")
setwd("D:/Data/FTP Download/Coursera/Data_Scientist_Path/R/Getting_N_Cleaning_Data/CleanData_CourseProject")
source("run_analysis.R")
run()
setwd("D:/Data/FTP Download/Coursera/Data_Scientist_Path/R/Sample_Scripts")
source("StockPortfolio.R")
TickerList <- c("DELL", "GOOGL","CSCO", "MSFT", "JNPR")
# R script to read prices from Yahoo and construct a portfolio
# updated 08/19/2012
# get libraries of routines  these packages need to be installed
suppressPackageStartupMessages(require (timeSeries))
suppressPackageStartupMessages(require (fPortfolio)) # may also require installing the package require(slam)
suppressPackageStartupMessages(require(quantmod))
suppressPackageStartupMessages(require(caTools))
# create list of stock tickers  replace the tickers here with those you want to use in your portfolio
TickerList <- c("DELL", "GOOGL","CSCO", "MSFT", "JNPR")
# read closing prices from Yahoo keeping only the closing prices
ClosingPricesRead <- NULL
for (Ticker in TickerList)
ClosingPricesRead <- cbind(ClosingPricesRead,
getSymbols.yahoo(Ticker, from=1950-01-01?, verbose=FALSE, auto.assign=FALSE)[,6]) # [,6] = keep the adjusted prices
# keep only the dates that have closing prices for all tickers
ClosingPrices <- ClosingPricesRead[apply(ClosingPricesRead,1,function(x) all(!is.na(x))),]
# convert prices to daily returns
returns <- as.timeSeries(tail(ClosingPrices,-1) / as.numeric(head(ClosingPrices,-1))  1)
# calculate the efficient frontier
Frontier <- portfolioFrontier(returns)
# plot frontier
plot(Frontier,1) # can also call the plot routine so it only plots the frontier: plot(Frontier,1)
###########################################################################################
####### addtional code to get a better look at the portfolios  annualize the returns and risk
# get the means and covariance matrix of the price returns
getStatistics(Frontier)$mean # data input into the efficient frontier calculator
cor(returns)
# execute the next commands to plot annualized returns and risk
# convert from daily to annual returns and risk for points on the efficient frontier
# plot efficient frontier using annualized return and risk
riskReturnPoints <- frontierPoints(Frontier) # get risk and return values for points on the efficient frontier
annualizedPoints <- data.frame(targetRisk=riskReturnPoints[, "targetRisk"] * sqrt(252),
targetReturn=riskReturnPoints[,"targetReturn"] * 252)
plot(annualizedPoints)
# plot Sharpe ratios for each point on the efficient frontier
riskFreeRate <- 0
plot((annualizedPoints[,"targetReturn"]  riskFreeRate) / annualizedPoints[,"targetRisk"], xlab=point on efficient frontier, ylab=Sharpe ratio)
# plot the allocation to each stock for each point on the efficient frontier
# weightsPlot(Frontier)
allocations <- getWeights(Frontier@portfolio) # get allocations for each instrument for each point on the efficient frontier
colnames(allocations) <- TickerList
barplot(t(allocations), col=rainbow(ncol(allocations)+2), legend=colnames(allocations))
allocations
############################################################################################
# examine the efficient frontier for portfolios with different constraints
constraints <- minW[1:length(TickerList)]=-1?
Frontier <- portfolioFrontier(returns, constraints = constraints)
Frontier.LongOnly <- portfolioFrontier(returns)
riskReturnPoints <- frontierPoints(Frontier)
annualizedPoints <- data.frame(targetRisk=riskReturnPoints[, "targetRisk"] * sqrt(252),
targetReturn=riskReturnPoints[,"targetReturn"] * 252)
riskReturnPoints.LongOnly <- frontierPoints(Frontier.LongOnly)
annualizedPoints.LongOnly <- data.frame(targetRisk=riskReturnPoints.LongOnly[, "targetRisk"] * sqrt(252),
targetReturn=riskReturnPoints.LongOnly[,"targetReturn"] * 252)
xlimit <- range(annualizedPoints[,1], annualizedPoints.LongOnly[,1])
ylimit <- range(annualizedPoints[,2], annualizedPoints.LongOnly[,2])
plot(annualizedPoints.LongOnly, xlim=xlimit, ylim=ylimit, pch=16, col=blue)
points(annualizedPoints, col=red, pch=16)
legend(right, legend=c(long only,constrained), col=c(blue,red), pch=16)
######
# other constraints
constraints <- c(minW[1:length(TickerList)]=.10?,maxW[1:length(TickerList)]=.60?)
# write data to csv file to import into excel
write.csv(allocations, allocations.csv)
source("Stocks.r")
run()
all()
optport()
optPort()
getReturns('AAPL', freq = c("month", "week", "day"),
get = c("overlapOnly", "all"), start = "1970-01-01", end = NULL)
x <- getReturns('AAPL', freq = c("month", "week", "day"),
get = c("overlapOnly", "all"), start = "1970-01-01", end = NULL)
names(x)
head(x)
x <- getReturns(c('IBM','AAPL', freq = c("month", "week", "day"),
get = c("overlapOnly", "all"), start = "1970-01-01", end = NULL)
x <- getReturns(c('IBM','AAPL'), freq = c("month", "week", "day"),
get = c("overlapOnly", "all"), start = "1970-01-01", end = NULL)
names(x)
x$ticker
head(x,n=5)
cBac <- getReturns(c('C','BAC'), start='2004-01-01', end='2008-12-31')
print(cBac)
summary(cBac)
plot(cBac)
lines(cBac, lwd=2)
pairs(cBac)
plot(cBac)
lines(cBac, lwd=2)
pairs(cBac)
# Attach the quantmod and TTR packages.
# You can install packages via:
# install.packages(c("quantmod","TTR"))
library(quantmod)
library(TTR)
# Pull S&P500 index data from Yahoo! Finance
getSymbols("^GSPC", from="2000-01-01", to="2008-12-07")
# Calculate the RSI indicator
rsi <- RSI(Cl(GSPC),2)
# Calculate Close-to-Close returns
# (this assumes we open/close our positions
# at each day's close)
ret <- ROC(Cl(GSPC))
ret[1] <- 0
# Define our position-sizing function
rsi2pos <- function(ind, indIncr=5, posIncr=0.25) {
# Inputs:
# ind : indicator vector
# indIncr : indicator value increments/breakpoints
# posIncr : position value increments/breakpoints
# Initialize result vector
size <- rep(0,NROW(ind))
# Long
size <- ifelse(ind < 4*indIncr, (1-posIncr*3), size)
size <- ifelse(ind < 3*indIncr, (1-posIncr*2), size)
size <- ifelse(ind < 2*indIncr, (1-posIncr*1), size)
size <- ifelse(ind < 1*indIncr, (1-posIncr*0), size)
# Short
size <- ifelse(ind > 100-4*indIncr, 3*posIncr-1, size)
size <- ifelse(ind > 100-3*indIncr, 2*posIncr-1, size)
size <- ifelse(ind > 100-2*indIncr, 1*posIncr-1, size)
size <- ifelse(ind > 100-1*indIncr, 0*posIncr-1, size)
# Today's position ('size') is based on today's
# indicator, but we need to apply today's position
# to the Close-to-Close return at tomorrow's close.
size <- lag(size)
# Replace missing signals with no position
# (generally just at beginning of series)
size[is.na(size)] <- 0
# Return results
return(size)
}
# Calculate signals using the 'rsi2pos()' function
sig <- rsi2pos(rsi, 5, 0.25)
# Break out the long (up) and short (dn) signals
sigup <- ifelse(sig > 0, sig, 0)
sigdn <- ifelse(sig < 0, sig, 0)
# Calculate equity curves
eq_up <- exp(cumsum(ret*sigup))
eq_dn <- exp(cumsum(ret*sigdn))
eq_all <- exp(cumsum(ret*sig))
# Replicate Michael's nice chart (again)
# png(filename="20090430_rsi2_replication.png")
plot.zoo( cbind(eq_up, eq_dn), plot.type="single",
ylab=c("Long","Short"), col=c("green","red"),
main="RSI(2) Strategy, with Position Scaling:\n 2000-01-03 through 2008-12-07" )
# dev.off()
# Calculate signals using the 'rsi2pos()' function
# with new values
sig <- rsi2pos(rsi, 10, 0.3)
# Break out the long (up) and short (dn) signals
sigup <- ifelse(sig > 0, sig, 0)
sigdn <- ifelse(sig < 0, sig, 0)
# Calculate equity curves
eq_up <- exp(cumsum(ret*sigup))
eq_dn <- exp(cumsum(ret*sigdn))
eq_all <- exp(cumsum(ret*sig))
# Re-plot equity curves using updated values
# png(filename="20090501_rsi2_updated.png")
plot.zoo( cbind(eq_up, eq_dn), plot.type="single",
ylab=c("Long","Short"), col=c("green","red"),
main="Updated RSI(2) Strategy, with Position Scaling:\n 2000-01-03 through 2008-12-07" )
# dev.off()
